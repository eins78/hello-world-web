name: Claude Renovate PR Handler

on:
  pull_request:
    types: [opened, synchronize]
  schedule:
    # Run every hour to check for Renovate PRs that need attention
    - cron: '0 * * * *'
  workflow_dispatch:
    # Allow manual triggering for testing

# Prevent multiple runs from happening at the same time
concurrency:
  group: claude-renovate
  cancel-in-progress: false

jobs:
  handle-renovate-pr:
    # For PR events: only run if actor is renovate[bot]
    # For schedule and manual dispatch: always run
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.actor == 'renovate[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: write
    steps:
      # For PR events, checkout the PR branch immediately
      - name: Checkout PR branch
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # For scheduled runs and manual dispatch, find open Renovate PRs that need attention first
      - name: Find Renovate PRs needing attention
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        id: find-prs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Find Renovate PRs with failing CI or without recent Claude activity
            const renovatePRs = prs.filter(pr => pr.user.login === 'renovate[bot]');
            
            for (const pr of renovatePRs) {
              // Check if CI is failing
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });
              
              const hasFailingChecks = checkRuns.check_runs.some(run => 
                run.conclusion === 'failure' && !run.name.includes('Claude')
              );
              
              if (!hasFailingChecks) continue;
              
              // Check last Claude activity (look for runs of this workflow)
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'claude-renovate.yml',
                branch: pr.head.ref,
                per_page: 1
              });
              
              // If no run in last 2 hours, we should process this PR
              const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
              const lastRun = workflowRuns.workflow_runs[0];
              if (!lastRun || new Date(lastRun.created_at) < twoHoursAgo) {
                core.setOutput('pr_number', pr.number);
                core.setOutput('pr_ref', pr.head.ref);
                core.setOutput('pr_data', JSON.stringify(pr));
                console.log(`Found PR #${pr.number} that needs attention`);
                return; // Process first PR found
              }
            }
            
            console.log('No Renovate PRs need attention');
            core.setOutput('pr_number', '');
          
      # For scheduled runs and manual dispatch, checkout the PR branch after finding it
      - name: Checkout PR branch for scheduled run
        if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && steps.find-prs.outputs.pr_number != ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.find-prs.outputs.pr_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # Set up PR context for Claude
      - name: Setup Claude Context
        if: github.event_name == 'pull_request' || steps.find-prs.outputs.pr_number != ''
        id: claude-context
        env:
          PR_NUMBER: ${{ steps.find-prs.outputs.pr_number || github.event.pull_request.number }}
          PR_DATA: ${{ steps.find-prs.outputs.pr_data || '{}' }}
          IS_SCHEDULED: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
        run: |
          set -e
          
          # Parse PR data
          # Parse PR data
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_BODY=$(jq -r .pull_request.body < $GITHUB_EVENT_PATH)
            PR_TITLE=$(jq -r .pull_request.title < $GITHUB_EVENT_PATH)
          else
            PR_NUMBER=${{ steps.find-prs.outputs.pr_number }}
            PR_JSON='${{ steps.find-prs.outputs.pr_data }}'
            PR_BODY=$(echo "$PR_JSON" | jq -r .body)
            PR_TITLE=$(echo "$PR_JSON" | jq -r .title)
          fi
          
          # Parse version info from PR body
          VERSION_LINE=$(echo "$PR_BODY" | grep -oE '\|\s*`[0-9]+\.[0-9]+\.[0-9]+`\s*->\s*`[0-9]+\.[0-9]+\.[0-9]+`\s*\|' | head -1 || true)
          if [ -n "$VERSION_LINE" ]; then
            OLD_VERSION=$(echo "$VERSION_LINE" | grep -oE '`[0-9]+\.[0-9]+\.[0-9]+`' | head -1 | tr -d '`')
            NEW_VERSION=$(echo "$VERSION_LINE" | grep -oE '`[0-9]+\.[0-9]+\.[0-9]+`' | tail -1 | tr -d '`')
            
            # Determine update type
            OLD_MAJOR=$(echo "$OLD_VERSION" | cut -d. -f1)
            OLD_MINOR=$(echo "$OLD_VERSION" | cut -d. -f2)
            OLD_PATCH=$(echo "$OLD_VERSION" | cut -d. -f3)
            NEW_MAJOR=$(echo "$NEW_VERSION" | cut -d. -f1)
            NEW_MINOR=$(echo "$NEW_VERSION" | cut -d. -f2)
            NEW_PATCH=$(echo "$NEW_VERSION" | cut -d. -f3)
            
            if [ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]; then
              UPDATE_TYPE="MAJOR"
            elif [ "$NEW_MINOR" -gt "$OLD_MINOR" ]; then
              UPDATE_TYPE="MINOR"
            elif [ "$NEW_PATCH" -gt "$OLD_PATCH" ]; then
              UPDATE_TYPE="PATCH"
            else
              UPDATE_TYPE="UNKNOWN"
            fi
          else
            UPDATE_TYPE="UNKNOWN"
            OLD_VERSION=""
            NEW_VERSION=""
          fi
          
          # Extract confidence level
          if echo "$PR_BODY" | grep -qiE 'confidence.*high'; then
            CONFIDENCE="HIGH"
          elif echo "$PR_BODY" | grep -qiE 'confidence.*low'; then
            CONFIDENCE="LOW"
          else
            CONFIDENCE="NEUTRAL"
          fi
          
          # Create context message for Claude (use cat to avoid YAML parsing issues)
          cat > /tmp/context.txt << 'CONTEXT_END'
          This is an automated Renovate dependency update PR #${PR_NUMBER}.
          
          PR Title: ${PR_TITLE}
          Update Type: ${UPDATE_TYPE} ${OLD_VERSION:+\(${OLD_VERSION} â†’ ${NEW_VERSION}\)}
          Merge Confidence: ${CONFIDENCE}
          
          ${IS_SCHEDULED:+Note: This is a scheduled re-run. CI may still be failing from previous attempts.}
          
          IMPORTANT: Read and follow RENOVATE.md for complete instructions.
          
          Key Rules:
          1. Work on this ONE PR only (don't touch other Renovate PRs)
          2. Either fix CI and merge OR escalate to @eins78
          3. Continue until ALL dependency updates are handled
          4. Never run or execute the project locally - only fix CI issues
          CONTEXT_END
          
          # Expand variables in the context
          CONTEXT=$(envsubst < /tmp/context.txt)
          
          # Save context for Claude using delimiter
          {
            echo "CLAUDE_CONTEXT<<CLAUDE_EOF"
            echo "$CONTEXT"
            echo "CLAUDE_EOF"
          } >> $GITHUB_OUTPUT
          
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          
      # Run Claude directly without posting comments
      - name: Run Claude PR Action
        # Skip for direct PR events due to permission issues - only run for scheduled/manual
        if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && steps.find-prs.outputs.pr_number != ''
        uses: anthropics/claude-code-action@beta
        env:
          # Pass PR context to Claude
          RENOVATE_PR_CONTEXT: ${{ steps.claude-context.outputs.CLAUDE_CONTEXT }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          timeout_minutes: "60"
          # The github_token should allow Claude to make commits
          github_token: ${{ secrets.GITHUB_TOKEN }}