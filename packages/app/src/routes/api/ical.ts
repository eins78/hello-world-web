import { Router, type Request, type Response } from "express";
import ical from "ical-generator";
import type { EventQueryParams, ParsedEvent } from "../../types/events.ts";
import { parseEventParams, addVendorExtensions } from "../../utils/ical-helpers.ts";

export const icalRouter: Router = Router();

/**
 * GET /api/ical/events.ics
 * Generate dynamic iCalendar feed for a single event
 */
icalRouter.get("/events.ics", (req: Request, res: Response) => {
  // Parse and validate parameters
  const parsed = parseEventParams(req.query as EventQueryParams);

  if ("error" in parsed) {
    return res.status(400).type("text/plain").send(parsed.error);
  }

  const event = parsed as ParsedEvent;

  try {
    // Create calendar with proper metadata
    const cal = ical({
      name: "Event Feed",
      prodId: {
        company: "Hello World Web",
        product: "Event Feed",
        language: "EN",
      },
      // Set calendar-level METHOD for proper client handling
      method: event.icalOptions.method,
    });

    // If timezone is specified, add VTIMEZONE by setting it on the calendar
    if (event.timezone) {
      cal.timezone(event.timezone);
    }

    // Create the event
    const calEvent = cal.createEvent({
      start: event.startDate,
      end: event.endDate,
      summary: event.title,
      description: "Event generated by Hello World Web iCalendar demo",
      location: "Demo Location", // Fixed for demo
      organizer: {
        name: "Demo Organizer",
        email: "noreply@hello-world-web.local",
      },
      sequence: event.icalOptions.sequence,
      status: event.icalOptions.status,
      // Timestamp when this iCal was generated
      stamp: new Date(),
    });

    // Set UID after creation (some versions require this)
    calEvent.uid(event.uid);

    // Add vendor-specific extensions for better compatibility
    addVendorExtensions(calEvent, event.icalOptions);

    // Set proper content type and send
    res.setHeader("Content-Type", "text/calendar; charset=utf-8");
    res.setHeader("Content-Disposition", 'inline; filename="events.ics"');

    // Send the generated iCalendar data
    res.send(cal.toString());
  } catch (error) {
    console.error("Error generating iCalendar:", error);
    res.status(500).type("text/plain").send("Error generating calendar data");
  }
});
