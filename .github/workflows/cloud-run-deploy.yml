# Cloud Run Deployment
#
# This workflow deploys the application to Google Cloud Run automatically
# when a new image is published to Docker Hub on the main branch.
#
# It serves as a "latest development" testing environment.
#
# Prerequisites:
# 1. Set up Workload Identity Federation for GitHub Actions
# 2. Configure the following repository secrets:
#    - GCP_PROJECT_ID: Your Google Cloud project ID
#    - GCP_REGION: Your Google Cloud region (e.g., europe-west6)
#    - GCP_SERVICE_NAME: Your Cloud Run service name
#    - GCP_SERVICE_ACCOUNT: Service account email for deployment
#    - GCP_WORKLOAD_IDENTITY_PROVIDER: Workload identity provider resource name
#    - DOCKERHUB_USERNAME: Docker Hub username
#    - DOCKERHUB_TOKEN: Docker Hub access token
#
# See docs/cloud-run-deployment.md for detailed setup instructions.

name: Deploy to Cloud Run

on:
  # Trigger when docker-image-publish workflow completes successfully on main
  workflow_run:
    workflows: ["Docker Image Build and Publish"]
    types:
      - completed
    branches:
      - main
  # Allow manual deployment
  workflow_dispatch:

env:
  GCP_REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}

jobs:
  deploy:
    # Only deploy if the workflow_run was successful, or if manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev.hello.kiste.li

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Generate short commit SHA and image reference
        id: commit
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "Short SHA: $SHORT_SHA"

          # Build full image name with commit-specific tag (matches docker/metadata-action format)
          IMAGE="index.docker.io/${{ github.repository }}:sha-${SHORT_SHA}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "Deploying image: $IMAGE"

          # Brief delay to ensure Docker Hub has fully propagated the image
          echo "Waiting 5 seconds for Docker Hub propagation..."
          sleep 5

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ steps.commit.outputs.image }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --min-instances=0 \
            --max-instances=5 \
            --memory=256Mi \
            --cpu=1 \
            --timeout=300 \
            --set-env-vars="APP_TITLE=Hello Cloud Run (latest dev),CI_RUN_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }},CI_COMMIT_SHA=${{ github.sha }},CI_COMMIT_SHORT_SHA=${{ steps.commit.outputs.short_sha }},CI_COMMIT_TIMESTAMP=${{ github.event.head_commit.timestamp }}" \
            --quiet

      - name: Get Service URL
        id: url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --format='value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $SERVICE_URL"

      - name: Run Health Check
        run: |
          echo "Waiting for service to be ready..."
          sleep 10

          SERVICE_URL="${{ steps.url.outputs.url }}"
          HEALTH_URL="${SERVICE_URL}/api/time?healthcheck"

          echo "Checking health at: $HEALTH_URL"

          # Retry health check up to 5 times
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✓ Health check passed"
              curl -s "$HEALTH_URL" | jq .
              exit 0
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 5
            fi
          done

          echo "✗ Health check failed after 5 attempts"
          exit 1
